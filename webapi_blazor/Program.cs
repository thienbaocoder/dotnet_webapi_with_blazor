using System.Net;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using webapi_blazor.Helper;
using webapi_blazor.models.EbayDB;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
//B·∫≠t giao di·ªán authentication 
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Version = "v1" });

    // üî• Th√™m h·ªó tr·ª£ Authorization header t·∫•t c·∫£ api
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Nh·∫≠p token v√†o √¥ b√™n d∆∞·ªõi theo ƒë·ªãnh d·∫°ng: Bearer {token}"
    });

    // üî• ƒê·ªãnh nghƒ©a y√™u c·∫ßu s·ª≠ d·ª•ng Authorization tr√™n t·ª´ng api
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});



builder.Services.AddControllers();

builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();
// ƒê·ªçc connection string t·ª´ appsettings.json
var connectionString = builder.Configuration.GetConnectionString("EbayConnection");
//K·∫øt n·ªëi db
builder.Services.AddDbContext<EbayContext>(options => options.UseSqlServer(connectionString));
//K·∫øt n·ªëi db 2 
// builder.Services.AddDbContext<EbayContextExtend>(options =>options.UseSqlServer(connectionString));
//DI service Auto mapper
builder.Services.AddAutoMapper(typeof(Program));

//DI Service JWT
builder.Services.AddScoped<JwtAuthService>();

builder.Services.AddHttpClient();
builder.Services.AddScoped<CategoryService>();
builder.Services.AddScoped<ProductService>();

// middleware cross
builder.Services.AddCors(option=>{
    option.AddPolicy("allow_origin", policy => {
        // policy.AllowAnyOrigin(); //Cho ph√©p t·∫•t c·∫£ c√°c client ƒë·ªÅu c√≥ th·ªÉ g·ª≠i d·ªØ li·ªáu ƒë·∫øn server
        policy.WithOrigins("https://localhost:5001","https://login.cybersoft.edu.vn","http://127.0.0.1:5500")
            .AllowAnyHeader() //Cho ph√©p rq t·∫•t c·∫£ header
            .AllowAnyMethod() //Cho ph√©p rq t·∫•t c·∫£ method (POST,PUT,GET,DELETE,OPTION)
            .AllowCredentials(); ////Cho ph√©p cookie...
    });
    // option.AddDefaultPolicy();
      option.AddPolicy("allow_GET", policy => {
        // policy.AllowAnyOrigin(); //Cho ph√©p t·∫•t c·∫£ c√°c client ƒë·ªÅu c√≥ th·ªÉ g·ª≠i d·ªØ li·ªáu ƒë·∫øn server
        policy.WithOrigins("https://localhost:5001","https://login.cybersoft.edu.vn","http://127.0.0.1:5500")
            .AllowAnyHeader() //Cho ph√©p rq t·∫•t c·∫£ header
            .WithMethods("GET") //Cho ph√©p rq t·∫•t c·∫£ method (POST,PUT,GET,DELETE,OPTION)
            .AllowCredentials(); ////Cho ph√©p cookie...
    });

});
// C·∫•u h√¨nh authentication c·ªßa jwt
//Th√™m middleware authentication
var privateKey = builder.Configuration["jwt:Serect-Key"];
var Issuer = builder.Configuration["jwt:Issuer"];
var Audience = builder.Configuration["jwt:Audience"];
// Th√™m d·ªãch v·ª• Authentication v√†o ·ª©ng d·ª•ng, s·ª≠ d·ª•ng JWT Bearer l√†m ph∆∞∆°ng th·ª©c x√°c th·ª±c
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>
{        
        // Thi·∫øt l·∫≠p c√°c tham s·ªë x√°c th·ª±c token
        options.TokenValidationParameters = new TokenValidationParameters()
        {
            // Ki·ªÉm tra v√† x√°c nh·∫≠n Issuer (ngu·ªìn ph√°t h√†nh token)
            ValidateIssuer = true, 
            ValidIssuer = Issuer, // Bi·∫øn `Issuer` ch·ª©a gi√° tr·ªã c·ªßa Issuer h·ª£p l·ªá
            // Ki·ªÉm tra v√† x√°c nh·∫≠n Audience (ƒë·ªëi t∆∞·ª£ng nh·∫≠n token)
            ValidateAudience = true,
            ValidAudience = Audience, // Bi·∫øn `Audience` ch·ª©a gi√° tr·ªã c·ªßa Audience h·ª£p l·ªá
            // Ki·ªÉm tra v√† x√°c nh·∫≠n kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ k√Ω token
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(privateKey)), 
            // S·ª≠ d·ª•ng kh√≥a b√≠ m·∫≠t (`privateKey`) ƒë·ªÉ t·∫°o SymmetricSecurityKey nh·∫±m x√°c th·ª±c ch·ªØ k√Ω c·ªßa token
            // Gi·∫£m ƒë·ªô tr·ªÖ (skew time) c·ªßa token xu·ªëng 0, ƒë·∫£m b·∫£o token h·∫øt h·∫°n ch√≠nh x√°c
            ClockSkew = TimeSpan.Zero, 
            // X√°c ƒë·ªãnh claim ch·ª©a vai tr√≤ c·ªßa user (ƒë·ªÉ ph√¢n quy·ªÅn)
            RoleClaimType = ClaimTypes.Role, 
            // X√°c ƒë·ªãnh claim ch·ª©a t√™n c·ªßa user
            NameClaimType = ClaimTypes.Name, 
            // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n c·ªßa token, kh√¥ng cho ph√©p s·ª≠ d·ª•ng token h·∫øt h·∫°n
            ValidateLifetime = true
        };
});
// Th√™m d·ªãch v·ª• Authorization ƒë·ªÉ h·ªó tr·ª£ ph√¢n quy·ªÅn ng∆∞·ªùi d√πng
builder.Services.AddAuthorization();




//-----------------------------------------------------------------------------


var app = builder.Build();
// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
//middleware
//C·∫•u h√¨nh middleware error 
// app.UseExceptionHandler(appBuilder =>
// {
//     appBuilder.Run(async context =>
//     {
//         var exceptionFeature = context.Features.Get<IExceptionHandlerFeature>();
//         // context.Request["Request URL"]
//         // ƒê·∫∑t response content-type th√†nh JSON
//         context.Response.ContentType = "application/json";
//         context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
//         // Tr·∫£ v·ªÅ JSON ch·ª©a th√¥ng tin l·ªói
//         var errorResponse = new { messageError = exceptionFeature?.Error.Message ?? "L·ªói kh√¥ng x√°c ƒë·ªãnh!" , StatusCode = context.Response.StatusCode};
//         //T·∫°o ra view model t∆∞∆°ng ·ª©ng 
//         await context.Response.WriteAsJsonAsync(errorResponse);
//     });
// });
//middle ware cors
app.UseCors("allow_origin");
//X√°c th·ª±c
app.UseRouting(); //routing c·ªßa blazor server v√† api
app.UseAuthentication();
app.UseAuthorization();

app.UseHttpsRedirection();
app.MapControllers(); //v√†o api 

//C·∫•u h√¨nh blazor server
app.UseStaticFiles(); //middle ware c·ªßa t·ªáp tƒ©nh (m·∫∑c ƒë·ªãnh l√† wwwroot)
app.MapBlazorHub();

app.MapFallbackToPage("/_Host");


app.Run();

